// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"storj.io/monkit-jaeger/gen-go/jaeger"

	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"

)

var _ = jaeger.GoUnusedProtection__

	nc Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "   submitBatches( batches)")
	fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

	nc (h httpHeaders) String() string {
	var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

	nc (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
		 len(parts) != 2 {
	  return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
  return nil
}

	nc main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
flag.Parse()
	
		 len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
			 err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
		  flag.Usage()
		}
		host = parsedUrl.Host
	  useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
		else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
			 err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
		  flag.Usage()
	  }
}
	
	cmd := flag.Arg(0)
	var err error
		 useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
			 len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
				r key, value := range headers {
			  httptrans.SetHeader(key, value)
		  }
	  }
		else {
		portStr := fmt.Sprint(port)
			ngs.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
				= nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
			        os.Exit(1)
		       }
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
			 err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
		  os.Exit(1)
		}
			 framed {
		  trans = thrift.NewTFramedTransport(trans)
	  }
	}
		 err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
	  os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
		se "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
	  break
		se "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
	  break
		se "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
	  break
		se "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
	  break
		fault:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
	  os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := jaeger.NewCollectorClient(thrift.NewTStandardClient(iprot, oprot))
		 err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
	  os.Exit(1)
}
	
	switch cmd {
		se "submitBatce":
			 flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "SubmitBatches requires 1 args")
		  flag.Usage()
		}
		arg12 := flag.Arg(1)
		mbTrans13 := thrift.NewTMemoryBufferLen(len(arg12))
		defer mbTrans13.Close()
		_, err14 := mbTras13.WriteString(arg12)
			 err14 != nil { 
			Usage()
		  return
		}
		factory15 := thrift.NewTJSONProtocolFactory()
		jsProt16 := factory15.GetProtocol(mbTrans13)
		containerStruct0 := jaeger.NewCollectorSubmitBatchesArgs()
		err17 := containerStruct0.ReadField1(jsProt16)
			 err17 != nil {
			Usage()
		  return
		}
		argvalue0 := containerStruct0.Batches
		value0 := argvalue0
		fmt.Print(client.SubmitBatches(context.Background(), value0))
		fmt.Print("\n")
	  break
		se "":
		Usage()
	  break
		fault:
	  fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
